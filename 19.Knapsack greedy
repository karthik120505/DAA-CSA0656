#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int weight;
    int value;
    double ratio;
} Item;

// Function to compare items based on their value/weight ratio
int compare(const void *a, const void *b) {
    Item *itemA = (Item *)a;
    Item *itemB = (Item *)b;
    if (itemA->ratio < itemB->ratio) return 1;
    else if (itemA->ratio > itemB->ratio) return -1;
    else return 0;
}
double knapsack(Item items[], int n, int capacity) {
    qsort(items, n, sizeof(Item), compare); 
    double totalValue = 0.0;
    for (int i = 0; i < n; i++) {
        if (capacity == 0) break;
        if (items[i].weight <= capacity) {
            capacity -= items[i].weight;
            totalValue += items[i].value;
        } else {
            totalValue += items[i].value * ((double)capacity / items[i].weight);
            capacity = 0;
        }
    }
    return totalValue;
}

int main() {
    int n, capacity;
	printf("U.Karthik 192210719\n");
    printf("Enter the number of items: ");
    scanf("%d", &n);

    Item *items = (Item *)malloc(n * sizeof(Item));

    printf("Enter the weight and value of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d - Weight: ", i + 1);
        scanf("%d", &items[i].weight);
        printf("Item %d - Value: ", i + 1);
        scanf("%d", &items[i].value);
        items[i].ratio = (double)items[i].value / items[i].weight;
    }

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    double maxValue = knapsack(items, n, capacity);
    printf("The maximum value that can be obtained is: %.2f\n", maxValue);

    free(items);
    return 0;
}
